/*
 ID: eric.111
 LANG: JAVA
 TASK: wormhole
 */

import java.awt.Point;
import java.io.*;
import java.util.*;

/*
 * Recursively generate all permutations (of pairs) of
 * n <= 12 wormholes.
 */

public class wormhole {
	
	static int output;
	
	public static void main(String[] args) throws IOException {
		Scanner scanner = new Scanner(new File("wormhole.in"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("wormhole.out")));
		// Scanner scanner = new Scanner(System.in);
		int n = scanner.nextInt();
		ArrayList<Point> wormholes = new ArrayList<Point>(n);
		for (int i = 0; i < n; i++) wormholes.add(new Point(scanner.nextInt(), scanner.nextInt()));
		findPairs(new ArrayList<Point[]>(), wormholes);
		
		System.out.println();
		out.close();
	}
	
	static void findPairs(ArrayList<Point[]/*size 2 array representing pair*/> prefix, ArrayList<Point> remainingPoints) {
		if (remainingPoints.size() < 2 /*could be 1 unpaired*/) { 
			Point[][] pairing = new Point[prefix.size()][2]; // completed configuration
			for (int i = 0; i < pairing.length; i++) pairing[i] = prefix.remove(0);
			for (int i = 0; i < pairing.length; i++) System.out.println(pairing[i][0].toString() + " " + pairing[i][1].toString());
			System.out.println();
		} else {
			for (int i = 0; i < remainingPoints.size() - 1; i++) {
				ArrayList<Point[]> copyOfPrefix = new ArrayList<Point[]>(prefix);
				ArrayList<Point> copyOfRemainingPoints = new ArrayList<Point>(remainingPoints);
				copyOfPrefix.add(new Point[]{copyOfRemainingPoints.remove(0), copyOfRemainingPoints.remove(i)});
				findPairs(copyOfPrefix, copyOfRemainingPoints);
			}
		}
		
	}
	
}