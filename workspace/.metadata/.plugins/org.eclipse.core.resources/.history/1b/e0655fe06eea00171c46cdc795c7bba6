import java.util.*;

public class PhoneLines {
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int vertices = scanner.nextInt(), edges = scanner.nextInt(), freeCables = scanner.nextInt();
		int[][] adjMatrix = new int[vertices][vertices], binMatrix = new int[vertices][vertices];
		int maxCost = Integer.MIN_VALUE, minCost = Integer.MAX_VALUE;
		for (int i = 0; i < edges; i++) {
			int vertex1 = scanner.nextInt() - 1, vertex2 = scanner.nextInt() - 1, cost = scanner.nextInt();
			adjMatrix[vertex1][vertex2] = cost;
			adjMatrix[vertex2][vertex1] = cost;
			maxCost = Math.max(maxCost, cost);
			minCost = Math.min(minCost, cost);
		} scanner.close();
		
		// binary search
		while (true) {
			int mid = (maxCost + minCost) / 2;
			boolean currentPath = existsPath(mid, freeCables, adjMatrix, binMatrix), prevPath = existsPath(mid - 1, freeCables, adjMatrix, binMatrix);
			if (currentPath && !prevPath) {
				System.out.println(mid);
				break;
			} else if (currentPath && prevPath) maxCost = mid - 1;
			else minCost = mid + 1;
		}
		
		
	}
	
	// returns true if there is a path between 1 and N with no more than K edges with
	// costs greater than maxWeight
	static boolean existsPath(int maxWeight, int K, int[][] adjMatrix, int[][] binMatrix) {
		for (int i = 0; i < binMatrix.length; i++) {
			for (int j = 0; j < binMatrix.length; j++) {
				if (adjMatrix[i][j] != 0) binMatrix[i][j] = adjMatrix[i][j] > maxWeight ? 1 : 0;
				else binMatrix[i][j] = -1; // no path
			}
		} binMatrix = getShortestPathTree(binMatrix);
		boolean connected = false;
		for (int i = 0; i < binMatrix[0].length; i++) connected = connected || binMatrix[binMatrix.length - 1][i] != -1;
		if (!connected) return false; // if no path exists from 1 to N
		// otherwise see if path total is less than K
		int[] edgeTo = new int[binMatrix.length];
		for (int i = 0; i < edgeTo.length; i++) edgeTo[i] = -1;
		boolean[] visited = new boolean[binMatrix.length];
		int currentNode = binMatrix.length - 1, costOfPath = 0;
		dfs(binMatrix, 0, currentNode, edgeTo, visited);
		while (edgeTo[currentNode] != -1) {
			costOfPath += binMatrix[currentNode][edgeTo[currentNode]];
			currentNode = edgeTo[currentNode];
		} return costOfPath <= K;
	}
	
	static void dfs(int[][] adjMatrix, int currentNode, int endingNode, int[] edgeTo, boolean[] visited) {
		visited[currentNode] = true;
		if (currentNode != endingNode) {
			for (int i = 0; i < adjMatrix[currentNode].length; i++) {
				if (adjMatrix[currentNode][i] != -1 && !visited[i]) {
					edgeTo[i] = currentNode;
					dfs(adjMatrix, i, endingNode, edgeTo, visited);
				}
			}
		} // otherwise return and edgeTo will be used
	}
	
	static int[][] getShortestPathTree(int[][] adjMatrix) {
		int[][] sptMatrix = new int[adjMatrix.length][adjMatrix[0].length];
		for (int i = 0; i < sptMatrix.length; i++) for (int j = 0; j < sptMatrix[0].length; j++) sptMatrix[i][j] = -1;
		int[] lowestCost = new int[adjMatrix.length + 1] /*extra value on end for min node selection*/, lowestCostVertex = new int[adjMatrix.length + 1];
		TreeSet<Integer> visitedNodes = new TreeSet<Integer>();
		for (int i = 0; i < lowestCost.length; i++) {
			lowestCost[i] = Integer.MAX_VALUE;
			lowestCostVertex[i] = -1; // -1 is flag value saying no path from existing SPT to lowestCostVertex[i]
		} lowestCost[0] = 0; // everything starts with infinite cost except 0 (SOURCE node to add to SPT)
		
		// greedy algorithm selecting locally optimal path
		while (visitedNodes.size() < adjMatrix.length) { // if looking for specific path we can break once path found
			int selectedNode = lowestCost.length - 1; // loop through all vertices select lowest cost node, lowestCost.length - 1 (extra value) will always be infinite so never selected
			for (int i = selectedNode; i >= 0; i--) if (!visitedNodes.contains(i) && lowestCost[i] < lowestCost[selectedNode]) selectedNode = i;
			visitedNodes.add(selectedNode); // add the minimum cost node
			if (lowestCostVertex[selectedNode] != -1) { // if not special flag value then add new edge to mstMatrix
				// different from MST, copy distance from original graph adjMatrix instead of totalCost bc totalCost from lowestCost[] will be of total path
				sptMatrix[selectedNode][lowestCostVertex[selectedNode]] = adjMatrix[selectedNode][lowestCostVertex[selectedNode]];
				sptMatrix[lowestCostVertex[selectedNode]][selectedNode] = adjMatrix[lowestCostVertex[selectedNode]][selectedNode];
			} for (int i = 0; i < adjMatrix.length; i++) { // now that SPT is modified, if new vertex provides cheaper route update minimum cost
				if (!visitedNodes.contains(i) && adjMatrix[selectedNode][i] != -1 /*path must exist from new node*/ && adjMatrix[selectedNode][i] + lowestCost[selectedNode] < lowestCost[i]) {
					lowestCost[i] = adjMatrix[selectedNode][i] + lowestCost[selectedNode]; // notable difference from MST: new cost is not just copied from adjMatrix but cumulative
					lowestCostVertex[i] = selectedNode;
				}
			}
		} return sptMatrix;
	}

}

/*
5 7 1
1 2 5
3 1 4
2 4 8
3 2 3
5 2 9
3 4 7
4 5 6

*/