/*
 ID: eric.111
 LANG: JAVA
 TASK: wormhole
 */

import java.awt.Point;
import java.io.*;
import java.util.*;

/*
 * Recursively generate all permutations of
 * n <= 12 wormholes, treating adjacent wormholes
 * as pairs. Find all working solutions. 12 levels,
 * each with n-d function calls where d is the 
 * recursion depth.
 */

public class wormhole {
	
	static LinkedList<Point[][]> pairings = new LinkedList<Point[][]>();
	
	public static void main(String[] args) throws IOException {
		Scanner scanner = new Scanner(new File("wormhole.in"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("wormhole.out")));
		// Scanner scanner = new Scanner(System.in);
		int n = scanner.nextInt();
		ArrayList<Point> wormholes = new ArrayList<Point>(n);
		for (int i = 0; i < n; i++) wormholes.add(new Point(scanner.nextInt(), scanner.nextInt()));
		findPairs(new ArrayList<Point>(), wormholes, wormholes.size() - wormholes.size() % 2 /*ensure even number*/);
		for (Point[][] array: pairings) {
			for (int i = 0; i < array.length; i++) {
				for (int j = 0; j < array[0].length; j++) System.out.print("(" + array[i][j].getX() + ", " + array[i][j].getY() + ") ");
				System.out.println();
			} System.out.println();
		}
		
		System.out.println();
		out.close();
	}
	
	// permutation method to find all distinct pairings
	static void findPairs(ArrayList<Point> prefix, ArrayList<Point> remainingPoints, int length /*in case odd number, stop at n - 1*/) {
		if (prefix.size() == length) { // permutation complete, add to pairings
			Point[][] pairs = new Point[(int)(prefix.size() / 2)][2]; // if odd number just truncate (leave one unpaired)
			for (int i = 0; i < pairs.length * pairs[0].length; i++) pairs[i / 2][i % 2] = prefix.remove(0);
			pairings.add(pairs);
		} else {
			for (int i = 0; i < remainingPoints.size(); i++) { // iterate through remaining points, new function call with each remaining point added
				ArrayList<Point> copyOfPrefix = new ArrayList<Point>(prefix), copyOfRemainingPoints = new ArrayList<Point>(remainingPoints);
				copyOfPrefix.add(copyOfRemainingPoints.remove(i)); // new function call requires updated prefix and remaining points subtracted
				findPairs(copyOfPrefix, copyOfRemainingPoints, length);
			}
		}
	}
	
	
}